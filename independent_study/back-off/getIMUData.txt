#include "freeram.h"
#include "MPU9250.h"
#include "mpu.h"
#include "I2Cdev.h"

void serialFloatPrint(float);
MPU9250 myIMU;

int ret;
void setup() {
    Fastwire::setup(400,0);
    Serial.begin(115200);
    ret = mympu_open(200);
    freeRam();
//    Serial.print("MPU init: "); Serial.println(ret);
//    Serial.print("Free mem: "); Serial.println(freeRam());
  myIMU.MPU9250SelfTest(myIMU.SelfTest);
//  myIMU.calibrateMPU9250(myIMU.gyroBias, myIMU.accelBias);
  myIMU.initMPU9250();
  myIMU.initAK8963(myIMU.magCalibration);
}

unsigned int c = 0; //cumulative number of successful MPU/DMP reads
unsigned int np = 0; //cumulative number of MPU/DMP reads that brought no packet back
unsigned int err_c = 0; //cumulative number of MPU/DMP reads that brought corrupted packet
unsigned int err_o = 0; //cumulative number of MPU/DMP reads that had overflow bit set

void loop() {
//    ret = mympu_update();
   mympu_update();
/*    switch (ret) {
  case 0: c++; break;
  case 1: np++; return;
  case 2: err_o++; return;
  case 3: err_c++; return; 
  default: 
    Serial.print("READ ERROR!  ");
    Serial.println(ret);
    return;
    }*/

    if (myIMU.readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)
  {  
    myIMU.readMagData(myIMU.magCount);  // Read the x/y/z adc values
    myIMU.getMres();
    // User environmental x-axis correction in milliGauss, should be
    // automatically calculated
    myIMU.magbias[0] = +470.;
    // User environmental x-axis correction in milliGauss TODO axis??
    myIMU.magbias[1] = +120.;
    // User environmental x-axis correction in milliGauss
    myIMU.magbias[2] = +125.;

    // Calculate the magnetometer values in milliGauss
    // Include factory calibration per data sheet and user environmental
    // corrections
    // Get actual magnetometer value, this depends on scale being set
    myIMU.mx = (float)myIMU.magCount[0]*myIMU.mRes*myIMU.magCalibration[0] -
               myIMU.magbias[0];
    myIMU.my = (float)myIMU.magCount[1]*myIMU.mRes*myIMU.magCalibration[1] -
               myIMU.magbias[1];
    myIMU.mz = (float)myIMU.magCount[2]*myIMU.mRes*myIMU.magCalibration[2] -
               myIMU.magbias[2];
  } // if (readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)

//    if (!(c%1)) {
 //     Serial.print(np); Serial.print("  "); Serial.print(err_c); Serial.print(" "); Serial.print(err_o);
      Serial.print('$');
      Serial.print(mympu.ypr[0]); Serial.print(',');
      Serial.print(mympu.ypr[1]); Serial.print(',');
      Serial.print(mympu.ypr[2]); Serial.print(',');
      Serial.print(mympu.gyro[0]); Serial.print(',');
      Serial.print(mympu.gyro[1]); Serial.print(',');
      Serial.print(mympu.gyro[2]); Serial.print(',');
      Serial.print(mympu.accel[0]); Serial.print(',');
      Serial.print(mympu.accel[1]); Serial.print(',');
      Serial.print(mympu.accel[2]); Serial.print(',');
      Serial.print(myIMU.mx); Serial.print(',');
      Serial.print(myIMU.my); Serial.print(',');
      Serial.print(myIMU.mz); Serial.print(',');
      Serial.print(mympu.q[0]); Serial.print(',');
      Serial.print(mympu.q[1]); Serial.print(',');
      Serial.print(mympu.q[2]); Serial.print(',');
      Serial.println(mympu.q[3]);
/*      Serial.write('$');
      Serial.write(0x02);
      serialFloatPrint(mympu.q[0]);
      serialFloatPrint(mympu.q[1]);
      serialFloatPrint(mympu.q[2]);
      serialFloatPrint(mympu.q[3]);
      Serial.write(0x00);
      Serial.write(0x00);
      Serial.write('\r');
      Serial.write('\n');*/
//    }
}

void serialFloatPrint(float f) {
  byte * b = (byte *) &f;
  Serial.write(b[0]);
  Serial.write(b[1]);
  Serial.write(b[2]);
  Serial.write(b[3]);
   /* DEBUG */
/*  Serial.println();
  Serial.print(b[0],BIN);
  Serial.print(b[1], BIN);
  Serial.print(b[2], BIN);
  Serial.println(b[3], BIN);*/
}
